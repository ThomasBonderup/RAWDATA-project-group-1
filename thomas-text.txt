D. Functionality

We developed the search functionality in the database for the movie application by first developing
the simple string_search() function D.2 to add basic search functionality when searching for a title.

We decided to use postgresql table functions to get the title data by having the function return a table with tconst and primarytitle.

RETURNS TABLE (
  tconst CHARACTER(10),
  primarytitle TEXT
)

Before returning the query the function inserts the search_string into the search_history table to log the search queries from the user by inserting the userid uconst a timestamp to track time and the search string. We use Postgresql NOW() function to return the current time for the time stamp. 

INSERT INTO search_history(uconst, tstamp, search)
VALUES(uconst, NOW(), search_string);

The last part of the function runs a RETURN query with a select statement to get the title from primarytitle or plot description by utilizing the ILIKE function to take upper and lower characters into consideration and matching the search string.

RETURN query SELECT t.tconst, t.primarytitle
FROM title t
WHERE t.primarytitle ILIKE '%'||search_string||'%' OR t.plot ILIKE '%'||search_string||'%';

D.4 function for structured string takes more input parameters to give a more precise search of title, plot, characters or primaryname of the actor. We thought that this function could be useful when users searches a more complex query when finding a title.

RETURN query SELECT title.tconst, title.primarytitle
FROM title NATURAL JOIN title_principals NATURAL JOIN name
WHERE title.primarytitle 	       ILIKE '%'||structured_string_search.title||'%'
AND   title.plot		       ILIKE '%'||structured_string_search.plot||'%'
AND   title_principals.characters      ILIKE '%'||structured_string_search.characters||'%'
AND   name.primaryname 		       ILIKE '%'||structured_string_search.name||'%';
END

It was when developing D.4 that we discovered that search strings can be empty and which both upper and lower case characters and we therefore decided to utilize the ILIKE function to solve these problems.

Functions with multiple parameters hardcoded quickly become complex with many lines of codes and they takes lots of time to refactor for example if a new or different input parameters are introduced. We talked about that VARIADIC arrays as an input parameters could a better design choice, because
VARIADIC arrays makes it possible for the function accept one to more input parameters as a single array, which makes the function more extensible and flexible compared to hardcoding input parameters and using postgresql overloading feature for functions.

D.12 Best-match Querying function uses a VARIADIC array as an input parameter to make the function more flexible by allowing any number of input parameters...

Dynamic query by executing a SQL expression



